name: CI-CD

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

concurrency:
  group: deploy-${{ github.repository }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # 👇 IMAGE = <username в lower>/tg-bot-pro
      - name: Set IMAGE env (lowercase)
        run: echo "IMAGE=$(echo '${{ secrets.DOCKERHUB_USERNAME }}' | tr '[:upper:]' '[:lower:]')/tg-bot-pro" >> $GITHUB_ENV

      - uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE }}:latest
            ${{ env.IMAGE }}:${{ github.sha }}

  deploy:
    needs: build-and-push-docker
    runs-on: [self-hosted, Windows, X64, tg-bot]
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      # 👇 та же переменная IMAGE на Windows
      - name: Set IMAGE env (lowercase)
        shell: powershell
        run: |
          $u='${{ secrets.DOCKERHUB_USERNAME }}'.ToLower()
          "IMAGE=$u/tg-bot-pro" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Runner & Docker info
        shell: powershell
        run: |
          whoami
          $PSVersionTable
          docker version
          (docker compose version) -or (docker-compose --version)

      - name: Login DockerHub on remote
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull image
        shell: powershell
        run: docker pull "$env:IMAGE:latest"

      - name: Up stack
        shell: powershell
        run: |
          docker compose -p tg_bot_pro up -d --remove-orphans 2>$null; if ($LASTEXITCODE -ne 0) { docker-compose -p tg_bot_pro up -d --remove-orphans }

      - name: Status & logs
        shell: powershell
        run: |
          docker compose -p tg_bot_pro ps 2>$null; if ($LASTEXITCODE -ne 0) { docker-compose -p tg_bot_pro ps }
          docker compose -p tg_bot_pro logs --no-color --tail=80 2>$null; if ($LASTEXITCODE -ne 0) { docker-compose -p tg_bot_pro logs --no-color --tail=80 }

      - name: Cleanup
        shell: powershell
        run: docker image prune -f
