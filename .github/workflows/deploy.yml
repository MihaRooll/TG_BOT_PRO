name: CI-CD

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

concurrency:
  group: deploy-${{ github.repository }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest
    env:
      IMAGE: miharooll/tg-bot-pro         # ← ПОДМЕНИ для этого репозитория
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE }}:latest
            ${{ env.IMAGE }}:${{ github.sha }}

  deploy:
    needs: build-and-push-docker
    runs-on: self-hosted
    timeout-minutes: 30
    env:
      IMAGE: miharooll/tg-bot-pro         # ← ПОДМЕНИ для этого репозитория
      STACK: tg-bot-pro                   # ← уникальное, нижний регистр (имя compose-проекта)
    steps:
      - uses: actions/checkout@v4

      - name: Runner & Docker info
        shell: pwsh
        run: |
          whoami
          docker version
          (docker compose version) -or (docker-compose --version)

      - name: Login to DockerHub (remote)
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull new image
        shell: pwsh
        run: |
          docker compose -p $env:STACK pull 2>$null; if ($LASTEXITCODE -ne 0) { docker-compose -p $env:STACK pull }

      - name: Recreate containers
        shell: pwsh
        run: |
          docker compose -p $env:STACK up -d --remove-orphans 2>$null; if ($LASTEXITCODE -ne 0) { docker-compose -p $env:STACK up -d --remove-orphans }

      - name: Show status & last logs
        shell: pwsh
        run: |
          docker compose -p $env:STACK ps 2>$null; if ($LASTEXITCODE -ne 0) { docker-compose -p $env:STACK ps }
          docker compose -p $env:STACK logs --no-color --tail=80 2>$null; if ($LASTEXITCODE -ne 0) { docker-compose -p $env:STACK logs --no-color --tail=80 }

      - name: Cleanup old images
        run: docker image prune -f
