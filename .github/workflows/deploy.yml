name: CI-CD

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

concurrency:
  group: deploy-${{ github.repository }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest
    # (опционально) разреши пропускать деплой по сообщению коммита:
    # if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') }}
    steps:
      - uses: actions/checkout@v4

      - name: Set IMAGE env (lowercase username)
        run: echo "IMAGE=$(echo '${{ secrets.DOCKERHUB_USERNAME }}' | tr '[:upper:]' '[:lower:]')/tg-bot-pro" >> $GITHUB_ENV

      - uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE }}:latest
            ${{ env.IMAGE }}:${{ github.sha }}

  deploy:
    needs: build-and-push-docker
    runs-on: [self-hosted, Windows, X64, tg-bot]
    timeout-minutes: 30
    # (опционально) синхронно со скипом выше:
    # if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') }}
    steps:
      - uses: actions/checkout@v4

      - name: Set IMAGE env (lowercase username)
        shell: powershell
        run: |
          $u='${{ secrets.DOCKERHUB_USERNAME }}'.ToLower()
          "IMAGE=$u/tg-bot-pro" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "IMAGE=$u/tg-bot-pro"

      - name: Runner & Docker info
        shell: powershell
        run: |
          whoami
          $PSVersionTable
          docker version
          (docker compose version) -or (docker-compose --version)

      - name: Login DockerHub on remote
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull image
        shell: powershell
        run: |
          Write-Host "Pulling $($env:IMAGE):latest"
          docker pull "$($env:IMAGE):latest"

      - name: Compose config (debug)
        shell: powershell
        run: |
          Write-Host "Using compose.yml with IMAGE=$($env:IMAGE)"
          docker compose -f compose.yml config

      - name: Up stack
        shell: powershell
        run: |
          docker compose -f compose.yml -p tg_bot_pro up -d --remove-orphans --no-build

      - name: Status & logs
        shell: powershell
        run: |
          docker compose -f compose.yml -p tg_bot_pro ps
          docker compose -f compose.yml -p tg_bot_pro logs --no-color --tail=80

      - name: Cleanup
        shell: powershell
        run: docker image prune -f
