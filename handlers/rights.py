# -*- coding: utf-8 -*-
"""Handlers for administering admin rights."""
from telebot import types
from bot import bot
from services.roles import (
    add_admin,
    remove_admin,
    get_admins,
    is_main_admin,
    MAIN_ADMIN_ID,
)
from utils.tg import safe_delete

# chat.id -> mode ("add" or "del") waiting for a forwarded message/ID
RIGHTS_WAIT = {}


@bot.callback_query_handler(func=lambda c: c.data == "rights:init")
def rights_menu(c: types.CallbackQuery):
    if not is_main_admin(c.from_user.id):
        bot.answer_callback_query(c.id)
        return
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("‚ûï –í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞", callback_data="rights:add"),
        types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∞", callback_data="rights:del"),
        types.InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data="rights:list"),
    )
    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", c.message.chat.id, c.message.message_id, reply_markup=kb)


@bot.callback_query_handler(func=lambda c: c.data in {"rights:add", "rights:del"})
def rights_prompt(c: types.CallbackQuery):
    if not is_main_admin(c.from_user.id):
        bot.answer_callback_query(c.id)
        return
    mode = "add" if c.data.endswith("add") else "del"
    RIGHTS_WAIT[c.message.chat.id] = mode
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="rights:cancel"))
    action = "–≤—ã–¥–∞—á–∏" if mode == "add" else "—É–¥–∞–ª–µ–Ω–∏—è"
    bot.edit_message_text(
        f"–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ ID –¥–ª—è {action} –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        c.message.chat.id,
        c.message.message_id,
        reply_markup=kb,
    )


@bot.callback_query_handler(func=lambda c: c.data == "rights:list")
def rights_list(c: types.CallbackQuery):
    if not is_main_admin(c.from_user.id):
        bot.answer_callback_query(c.id)
        return
    admins = get_admins()
    text = "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n" + "\n".join([str(MAIN_ADMIN_ID)] + [str(a) for a in admins])
    bot.answer_callback_query(c.id)
    bot.edit_message_text(text, c.message.chat.id, c.message.message_id)


@bot.callback_query_handler(func=lambda c: c.data == "rights:cancel")
def rights_cancel(c: types.CallbackQuery):
    RIGHTS_WAIT.pop(c.message.chat.id, None)
    bot.edit_message_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", c.message.chat.id, c.message.message_id)


@bot.message_handler(func=lambda m: m.chat.id in RIGHTS_WAIT)
def rights_handle(m: types.Message):
    if not is_main_admin(m.from_user.id):
        return
    uid = None
    if m.forward_from:
        uid = m.forward_from.id
    else:
        try:
            uid = int(m.text.strip())
        except Exception:
            pass
    if not uid:
        bot.reply_to(m, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID.")
        return
    mode = RIGHTS_WAIT.pop(m.chat.id)
    if mode == "add":
        add_admin(uid)
        bot.reply_to(m, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    else:
        remove_admin(uid)
        bot.reply_to(m, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    safe_delete(bot, m.chat.id, m.message_id)
