\
# -*- coding: utf-8 -*-
from telebot import types
from .core import WIZ, edit

def render_letters_hub(chat_id: int):
    d = WIZ[chat_id]["data"]
    feats = d.setdefault("features", {"letters": True, "numbers": True})
    rules = d.setdefault("text_rules", {"allow_latin": True, "allow_cyrillic": False, "allow_space": True, "max_text_len": 12, "max_number": 99})
    pal   = d.setdefault("text_palette", ["white","black"])

    letters_status = "–í–ö–õ–Æ–ß–ï–ù–´ ‚úÖ" if feats.get('letters') else "–í–´–ö–õ–Æ–ß–ï–ù–´ ‚ùå"
    numbers_status = "–í–ö–õ–Æ–ß–ï–ù–´ ‚úÖ" if feats.get('numbers') else "–í–´–ö–õ–Æ–ß–ï–ù–´ ‚ùå"
    alphabet_line = (("–õ–∞—Ç–∏–Ω–∏—Ü–∞" if rules.get('allow_latin') else "") + (" / " if rules.get('allow_latin') and rules.get('allow_cyrillic') else "") + ("–ö–∏—Ä–∏–ª–ª–∏—Ü–∞" if rules.get('allow_cyrillic') else "")) or "‚Äî"
    space_line    = "–†–∞–∑—Ä–µ—à–µ–Ω ‚úîÔ∏è" if rules.get('allow_space') else "–ó–∞–ø—Ä–µ—â–µ–Ω ‚úñÔ∏è"

    text = (
        "<pre>"
        "<b>üî§ –®–ê–ì 2/4: –ù–ê–°–¢–†–û–ô–ö–ê –ë–£–ö–í –ò –¶–ò–§–† üî¢</b>\n\n"
        "<b>‚ú® –ë—É–∫–≤—ã</b>\n"
        f"   ‚îú‚îÄ <b>–°—Ç–∞—Ç—É—Å:</b> {letters_status}\n"
        f"   ‚îú‚îÄ <b>–ê–ª—Ñ–∞–≤–∏—Ç:</b> {alphabet_line} ‚ñ∏ \n"
        f"   ‚îú‚îÄ <b>–ü—Ä–æ–±–µ–ª:</b> {space_line}\n"
        f"   ‚îî‚îÄ <b>–ú–∞–∫—Å. –¥–ª–∏–Ω–∞:</b> ‚â§{rules.get('max_text_len','‚Äî')} —Å–∏–º–≤\n\n"
        "<b>‚ú® –¶–∏—Ñ—Ä—ã</b>\n"
        f"   ‚îú‚îÄ <b>–°—Ç–∞—Ç—É—Å:</b> {numbers_status}\n"
        f"   ‚îî‚îÄ <b>–ú–∞–∫—Å. –Ω–æ–º–µ—Ä:</b> ‚â§{rules.get('max_number','‚Äî')}\n\n"
        "<b>üé® –ü–∞–ª–∏—Ç—Ä–∞ —Ü–≤–µ—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞</b>\n"
        f"   ‚îî‚îÄ {', '.join(pal) if pal else '‚Äî'}\n"
        "</pre>"
    )
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(types.InlineKeyboardButton(f"–ë—É–∫–≤—ã: {'–≤–∫–ª' if feats.get('letters') else '–≤—ã–∫–ª'}", callback_data="setup:feature_toggle:letters"),
            types.InlineKeyboardButton(f"–¶–∏—Ñ—Ä—ã: {'–≤–∫–ª' if feats.get('numbers') else '–≤—ã–∫–ª'}", callback_data="setup:feature_toggle:numbers"))
    kb.add(types.InlineKeyboardButton(f"–õ–∞—Ç–∏–Ω–∏—Ü–∞: {'–¥–∞' if rules.get('allow_latin') else '–Ω–µ—Ç'}", callback_data="setup:rule_toggle:allow_latin"),
            types.InlineKeyboardButton(f"–ö–∏—Ä–∏–ª–ª–∏—Ü–∞: {'–¥–∞' if rules.get('allow_cyrillic') else '–Ω–µ—Ç'}", callback_data="setup:rule_toggle:allow_cyrillic"))
    kb.add(types.InlineKeyboardButton(f"–ü—Ä–æ–±–µ–ª: {'–¥–∞' if rules.get('allow_space') else '–Ω–µ—Ç'}", callback_data="setup:rule_toggle:allow_space"),
            types.InlineKeyboardButton("–ü—Ä–µ–¥–µ–ª—ã ‚úèÔ∏è", callback_data="setup:limits"))
    kb.add(types.InlineKeyboardButton("–ü–∞–ª–∏—Ç—Ä–∞ —Ü–≤–µ—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞", callback_data="setup:palette"),
            types.InlineKeyboardButton("2.1) –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è ‚Üí", callback_data="setup:map_text_colors"))
    kb.add(types.InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="setup:home"))
    edit(chat_id, text, kb)
    WIZ[chat_id]["stage"] = "text_hub"

def render_limits_progress(chat_id: int):
    d = WIZ[chat_id]["data"].setdefault("text_rules", {"allow_latin": True, "allow_cyrillic": False, "allow_space": True, "max_text_len": 12, "max_number": 99})
    st = WIZ[chat_id]["data"].setdefault("_limits", {"len_ok": bool(d.get('max_text_len')), "num_ok": bool(d.get('max_number'))})
    text = (
        "<pre><b>–ü—Ä–µ–¥–µ–ª—ã ‚úèÔ∏è</b>\n"
        f"1) –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {'‚òë' if st.get('len_ok') else '‚òê'}  (—Ç–µ–∫—É—â.: {d.get('max_text_len', '‚Äî')})\n"
        f"2) –ú–∞–∫—Å. –Ω–æ–º–µ—Ä:  {'‚òë' if st.get('num_ok') else '‚òê'}  (—Ç–µ–∫—É—â.: {d.get('max_number', '‚Äî')})\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–ø –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø–æ –ø–æ—Ä—è–¥–∫—É.\n</pre>"
    )
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(types.InlineKeyboardButton("1) –í–≤–µ—Å—Ç–∏ –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞", callback_data="setup:limits_edit:text_len"),
            types.InlineKeyboardButton("2) –í–≤–µ—Å—Ç–∏ –º–∞–∫—Å. –Ω–æ–º–µ—Ä", callback_data="setup:limits_edit:max_num"))
    if st.get("len_ok") and st.get("num_ok"):
        kb.add(types.InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ ‚òë", callback_data="setup:limits_done"))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="setup:letters"))
    edit(chat_id, text, kb)
    WIZ[chat_id]["stage"] = "limits_progress"

def ask_limit_len(chat_id: int):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="setup:limits"))
    edit(chat_id, "<b>–ü—Ä–µ–¥–µ–ª—ã ‚úèÔ∏è ‚Äî —à–∞–≥ 1/2.</b>\n–í–≤–µ–¥–∏—Ç–µ <b>–º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12).", kb)
    WIZ[chat_id]["stage"] = "limits_len"

def ask_limit_num(chat_id: int):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="setup:limits"))
    edit(chat_id, "<b>–ü—Ä–µ–¥–µ–ª—ã ‚úèÔ∏è ‚Äî —à–∞–≥ 2/2.</b>\n–í–≤–µ–¥–∏—Ç–µ <b>–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 99).", kb)
    WIZ[chat_id]["stage"] = "limits_num"

def toggle_feature(chat_id: int, which: str):
    feats = WIZ[chat_id]["data"].setdefault("features", {"letters": True, "numbers": True})
    feats[which] = not feats.get(which, False)
    render_letters_hub(chat_id)

def toggle_rule(chat_id: int, rule: str):
    rules = WIZ[chat_id]["data"].setdefault("text_rules", {"allow_latin": True, "allow_cyrillic": False, "allow_space": True, "max_text_len": 12, "max_number": 99})
    rules[rule] = not rules.get(rule, False)
    render_letters_hub(chat_id)

def set_limit_len(chat_id: int, val: int):
    rules = WIZ[chat_id]["data"].setdefault("text_rules", {})
    rules["max_text_len"] = val
    WIZ[chat_id]["data"].setdefault("_limits", {})["len_ok"] = True
    render_limits_progress(chat_id)

def set_limit_num(chat_id: int, val: int):
    rules = WIZ[chat_id]["data"].setdefault("text_rules", {})
    rules["max_number"] = val
    WIZ[chat_id]["data"].setdefault("_limits", {})["num_ok"] = True
    render_limits_progress(chat_id)
