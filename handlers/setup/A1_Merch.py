\
# -*- coding: utf-8 -*-
from telebot import types
from .core import WIZ, edit, slugify, merch_tree
from utils.tg import color_key_from_ru, register_color_name

DEFAULT_MERCH  = [("tshirt","–§—É—Ç–±–æ–ª–∫–∏"),("shopper","–®–æ–ø–ø–µ—Ä—ã"),("mug","–ö—Ä—É–∂–∫–∏")]
DEFAULT_COLORS = [("white","–ë–µ–ª—ã–π"),("black","–ß—ë—Ä–Ω—ã–π"),("red","–ö—Ä–∞—Å–Ω—ã–π"),("blue","–°–∏–Ω–∏–π"),("green","–ó–µ–ª—ë–Ω—ã–π"),("brown","–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π")]
DEFAULT_SIZES  = ["XS","S","M","L","XL","XXL"]
ONESIZE        = ["OneSize"]

def _header_with_tree(chat_id: int, title: str) -> str:
    d = WIZ[chat_id]["data"]
    tree = merch_tree(d)
    return f"<b>{title}</b>\n<pre>–°—Ç—Ä—É–∫—Ç—É—Ä–∞\n{tree}\n</pre>"

def render_types(chat_id: int):
    d = WIZ[chat_id].setdefault("data", {})
    merch = d.setdefault("merch", {})
    kb = types.InlineKeyboardMarkup(row_width=2)
    for key, name in DEFAULT_MERCH:
        mark = "‚úì" if key in merch else "¬∑"
        kb.add(types.InlineKeyboardButton(f"{name} {mark}", callback_data=f"setup:merch_toggle:{key}"))
    kb.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥", callback_data="setup:merch_add"))
    if merch:
        kb.add(types.InlineKeyboardButton("–î–∞–ª–µ–µ: —Ü–≤–µ—Ç–∞/—Ä–∞–∑–º–µ—Ä—ã ‚Üí", callback_data="setup:colors_sizes"))
    kb.add(types.InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="setup:home"))
    edit(chat_id, _header_with_tree(chat_id, "–®–∞–≥ 1/4. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥—ã –º–µ—Ä—á–∞ (–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏)."), kb)
    WIZ[chat_id]["stage"] = "merch"

def toggle_type(chat_id: int, mk: str):
    d = WIZ[chat_id]["data"].setdefault("merch", {})
    if mk in d: d.pop(mk, None)
    else: d[mk] = {"name_ru": dict(DEFAULT_MERCH).get(mk, mk), "colors": {}, "sizes": []}
    render_types(chat_id)

def ask_custom(chat_id: int):
    WIZ[chat_id]["stage"] = "merch_add"
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="setup:merch"))
    edit(chat_id, _header_with_tree(chat_id, "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> –Ω–æ–≤–æ–≥–æ –º–µ—Ä—á–∞ (–∫–ª—é—á —Å–æ–∑–¥–∞–¥–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)."), kb)

def handle_custom_input(chat_id: int, text: str):
    name = text.strip()
    d = WIZ[chat_id]["data"].setdefault("merch", {})
    key = slugify(name, used=list(d.keys()))
    d[key] = {"name_ru": name, "colors": {}, "sizes": []}
    render_types(chat_id)

def start_colors_iter(chat_id: int):
    keys = list(WIZ[chat_id]["data"].get("merch", {}).keys())
    WIZ[chat_id]["data"]["_merch_iter"] = keys
    if keys:
        render_colors(chat_id, keys.pop(0))
    else:
        render_types(chat_id)

def render_colors(chat_id: int, mk: str):
    d = WIZ[chat_id]["data"]
    item = d["merch"][mk]
    colors = item.setdefault("colors", {})
    kb = types.InlineKeyboardMarkup(row_width=3)
    for key, name in DEFAULT_COLORS:
        mark = "‚úì" if key in colors else "¬∑"
        kb.add(types.InlineKeyboardButton(f"{name} {mark}", callback_data=f"setup:color_toggle:{mk}:{key}"))
    kb.add(types.InlineKeyboardButton("‚ûï –°–≤–æ–π —Ü–≤–µ—Ç", callback_data=f"setup:color_add:{mk}"))
    if colors:
        kb.add(types.InlineKeyboardButton("–î–∞–ª–µ–µ: —Ä–∞–∑–º–µ—Ä—ã ‚Üí", callback_data=f"setup:sizes:{mk}"))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ—Ä—á—É", callback_data="setup:merch"))
    edit(chat_id, _header_with_tree(chat_id, f"–®–∞–≥ 1.1/4. <b>{item['name_ru']}</b> ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç–∞."), kb)
    WIZ[chat_id]["stage"] = f"colors:{mk}"

def toggle_color(chat_id: int, mk: str, ck: str):
    colors = WIZ[chat_id]["data"]["merch"][mk].setdefault("colors", {})
    if ck in colors: colors.pop(ck, None)
    else: colors[ck] = {"name_ru": dict(DEFAULT_COLORS).get(ck, ck)}
    render_colors(chat_id, mk)

def ask_custom_color(chat_id: int, mk: str):
    WIZ[chat_id]["stage"] = f"color_add:{mk}"
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"setup:colors:{mk}"))
    edit(chat_id, _header_with_tree(chat_id, "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞</b> (–∫–ª—é—á —Å–æ–∑–¥–∞–¥–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)."), kb)

def handle_custom_color(chat_id: int, mk: str, text: str):
    name = text.strip()
    colors = WIZ[chat_id]["data"]["merch"][mk].setdefault("colors", {})
    used = list(colors.keys())
    key = color_key_from_ru(name, used)
    colors[key] = {"name_ru": name}
    WIZ[chat_id]["data"].setdefault("color_names", {})[key] = name
    register_color_name(key, name)
    render_colors(chat_id, mk)

def render_sizes(chat_id: int, mk: str):
    d = WIZ[chat_id]["data"]
    item = d["merch"][mk]
    sizes = item.get("sizes", [])
    sizes_text = ", ".join(sizes) if sizes else "‚Äî"
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä—è–¥ (XS..XXL)", callback_data=f"setup:sizes_default:{mk}"))
    kb.add(types.InlineKeyboardButton("OneSize", callback_data=f"setup:sizes_one:{mk}"))
    kb.add(types.InlineKeyboardButton("‚ûï –°–≤–æ–π —Å–ø–∏—Å–æ–∫", callback_data=f"setup:sizes_add:{mk}"))
    if sizes:
        kb.add(types.InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ —Å–ª–µ–¥—É—é—â–∏–π", callback_data="setup:next_merch_or_done"))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ü–≤–µ—Ç–∞–º", callback_data=f"setup:colors:{mk}"))
    kb.add(types.InlineKeyboardButton("‚Ü©Ô∏è –ö –≤–∏–¥–∞–º –º–µ—Ä—á–∞", callback_data="setup:merch"))
    edit(chat_id, _header_with_tree(chat_id, f"–®–∞–≥ 1.2/4. <b>{item['name_ru']}</b> ‚Äî —Ä–∞–∑–º–µ—Ä—ã.\n–¢–µ–∫—É—â–∏–µ: {sizes_text}"), kb)
    WIZ[chat_id]["stage"] = f"sizes:{mk}"

def set_default_sizes(chat_id: int, mk: str):
    WIZ[chat_id]['data']['merch'][mk]['sizes'] = DEFAULT_SIZES[:]
    render_sizes(chat_id, mk)

def set_one_size(chat_id: int, mk: str):
    WIZ[chat_id]['data']['merch'][mk]['sizes'] = ONESIZE[:]
    render_sizes(chat_id, mk)

def ask_custom_sizes(chat_id: int, mk: str):
    WIZ[chat_id]["stage"] = f"sizes_add:{mk}"
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"setup:sizes:{mk}"))
    edit(chat_id, _header_with_tree(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–ø—Ä–∏–º–µ—Ä: 3XS,2XS,XS,S,M,L,XL)."), kb)

def handle_custom_sizes(chat_id: int, mk: str, text: str):
    parts = [p.strip() for p in text.replace("Ôºå", ",").replace(";", ",").split(",") if p.strip()]
    if parts:
        WIZ[chat_id]["data"]["merch"][mk]["sizes"] = parts
    render_sizes(chat_id, mk)

def next_merch_or_done(chat_id: int):
    it = WIZ[chat_id]["data"].get("_merch_iter", [])
    if it:
        mk = it.pop(0)
        render_colors(chat_id, mk)
    else:
        from .A2_Letters import render_letters_hub
        render_letters_hub(chat_id)
